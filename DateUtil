import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

public class DateUtil {
	public static final long SECOND = 1000L;
	public static final long MINUTE = 60000L;
	public static final long HOUR = 3600000L;
	public static final long DAY = 86400000L;
	public static final String TIME_BEGIN = " 00:00:00";
	public static final String TIME_END = " 23:59:59";
	public static final String MONTH_PATTERN = "yyyy-MM";
	public static final String DEFAULT_PATTERN = "yyyyMMdd";
	public static final String FULL_PATTERN = "yyyyMMddHHmmss";
	public static final String FULL_STANDARD_PATTERN = "yyyyMMdd HH:mm:ss";
	public static final String TRADITION_PATTERN = "yyyy-MM-dd";
	public static final String FULL_TRADITION_PATTERN = "yyyy-MM-dd HH:mm:ss";
	public static final String FULL_TRADITION_PATTERN_BEGIN = "yyyy-MM-dd 00:00:00";
	public static final String FULL_TRADITION_PATTERN_END = "yyyy-MM-dd 23:59:59";

	public static String getShortNow() {
		return formatDate("yyyy-MM-dd");
	}

	public static String getDayBegin() {
		return formatDate("yyyy-MM-dd") + TIME_BEGIN;
	}

	public static String getDayEnd() {
		return formatDate("yyyy-MM-dd") + TIME_END;
	}

	public static Date getDayBegin(Date date) {
		return DateUtil.parseDate(
				DateUtil.formatDate(date, TRADITION_PATTERN + TIME_BEGIN),
				FULL_TRADITION_PATTERN);
	}

	public static Date getDayEnd(Date date) {
		return DateUtil.parseDate(
				DateUtil.formatDate(date, TRADITION_PATTERN + TIME_END),
				FULL_TRADITION_PATTERN);
	}

	public static String getTimeBykm() {
		return formatDate("H:mm");
	}

	public static String getMonth() {
		return formatDate("MM");
	}

	public static String getDay() {
		return formatDate("dd");
	}

	public static String formatDate(Date date) {
		return formatDate(date, "yyyyMMdd");
	}

	public static String formatDate(Date date, String format) {
		if ((null == date) || (StringUtil.isEmpty(format)))
			return null;
		try {
			return new SimpleDateFormat(format).format(date);
		} catch (Exception e) {
			logger.error("", e);
		}
		return null;
	}

	public static String formatDate(String format) {
		return formatDate(new Date(), format);
	}

	public static Date parseDate(Long date) {
		return new Date(date);
	}

	public static Date parseDate(String date) {
		return parseDate(date, "yyyyMMdd", null);
	}

	public static Date parseDate(String date, String df) {
		return parseDate(date, df, null);
	}

	public static Date parseDate(String date, String df, Date defaultValue) {
		if ((date == null) || (StringUtil.isEmpty(df))) {
			return defaultValue;
		}

		SimpleDateFormat formatter = new SimpleDateFormat(df);
		try {
			return formatter.parse(date);
		} catch (ParseException e) {
			logger.error("", e);
		}

		return defaultValue;
	}

	public static Date currentDate() {
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeInMillis(System.currentTimeMillis());
		calendar.set(10, 0);
		calendar.set(12, 0);
		calendar.set(13, 0);
		calendar.set(14, 0);
		return new Date(calendar.getTimeInMillis());
	}

	public static Date getStartOfDate(Date date) {
		if (date == null)
			return null;
		Calendar cal = GregorianCalendar.getInstance();
		cal.setTime(date);

		cal.set(11, 0);
		cal.set(12, 0);
		cal.set(13, 0);
		cal.set(14, 0);

		return new Date(cal.getTime().getTime());
	}

	public static Date getPreviousMonday() {
		Calendar cd = Calendar.getInstance();

		int dayOfWeek = cd.get(7) - 1;
		Date date;
		if (dayOfWeek == 1)
			date = addDays(cd.getTime(), -7);
		else {
			date = addDays(cd.getTime(), -6 - dayOfWeek);
		}

		return getStartOfDate(date);
	}

	public static Date getMondayBefore4Week() {
		Calendar cd = Calendar.getInstance();

		int dayOfWeek = cd.get(7) - 1;
		Date date;
		if (dayOfWeek == 1)
			date = addDays(cd.getTime(), -28);
		else {
			date = addDays(cd.getTime(), -27 - dayOfWeek);
		}

		return getStartOfDate(date);
	}

	public static Date getCurrentMonday() {
		Calendar cd = Calendar.getInstance();

		int dayOfWeek = cd.get(7) - 1;
		Date date;
		if (dayOfWeek == 1)
			date = cd.getTime();
		else {
			date = addDays(cd.getTime(), 1 - dayOfWeek);
		}

		return getStartOfDate(date);
	}

	public static boolean beforeDay(Date date1, Date date2) {
		if (date1 == null)
			return true;
		return getStartOfDate(date1).before(getStartOfDate(date2));
	}

	public static boolean afterDay(Date date1, Date date2) {
		if (date1 == null)
			return false;
		return getStartOfDate(date1).after(getStartOfDate(date2));
	}

	public static Date addMonths(Date date, int months) {
		if (months == 0)
			return date;
		if (date == null)
			return null;
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		cal.add(2, months);
		return cal.getTime();
	}

	public static Date addDays(Date date, int days) {
		if (days == 0)
			return date;
		if (date == null)
			return null;
		Calendar cal = GregorianCalendar.getInstance();
		cal.setTime(date);
		cal.add(5, days);

		return new Date(cal.getTime().getTime());
	}

	public static Date addMins(Date date, int mins) {
		if (mins == 0)
			return date;
		if (date == null)
			return null;
		Calendar cal = GregorianCalendar.getInstance();
		cal.setTime(date);
		cal.add(12, mins);

		return new Date(cal.getTime().getTime());
	}

	public static boolean isSameMonth(Date date1, Date date2) {
		if ((date1 == null) && (date2 == null))
			return true;
		if ((date1 == null) || (date2 == null))
			return false;
		Calendar cal1 = GregorianCalendar.getInstance();
		cal1.setTime(date1);
		Calendar cal2 = GregorianCalendar.getInstance();
		cal2.setTime(date2);
		return isSameMonth(cal1, cal2);
	}

	public static boolean isSameDay(Date date1, Date date2) {
		if ((date1 == null) && (date2 == null))
			return true;
		if ((date1 == null) || (date2 == null))
			return false;
		Calendar cal1 = GregorianCalendar.getInstance();
		cal1.setTime(date1);
		Calendar cal2 = GregorianCalendar.getInstance();
		cal2.setTime(date2);

		return (cal1.get(1) == cal2.get(1)) && (cal1.get(2) == cal2.get(2))
				&& (cal1.get(5) == cal2.get(5));
	}

	public static boolean isSameMonth(Calendar cal1, Calendar cal2) {
		if ((cal1 == null) && (cal2 == null))
			return true;
		if ((cal1 == null) || (cal2 == null))
			return false;
		return (cal1.get(1) == cal2.get(1)) && (cal1.get(2) == cal2.get(2));
	}

	public static Date getEndOfMonth(Date date) {
		if (date == null)
			return null;
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);

		calendar.set(2, calendar.get(2) + 1);
		calendar.set(5, 0);

		calendar.set(11, 12);
		calendar.set(12, 0);
		calendar.set(13, 0);
		calendar.set(14, 0);
		return new Date(calendar.getTimeInMillis());
	}

	public static Date getFirstOfMonth(Date date) {
		Date lastMonth = addMonths(date, -1);
		lastMonth = getEndOfMonth(lastMonth);
		return addDays(lastMonth, 1);
	}

	public static boolean inFormat(String sourceDate, String format) {
		if ((sourceDate == null) || (StringUtil.isEmpty(format)))
			return false;
		try {
			SimpleDateFormat dateFormat = new SimpleDateFormat(format);
			dateFormat.setLenient(false);
			dateFormat.parse(sourceDate);
			return true;
		} catch (Exception e) {
		}
		return false;
	}

	public static String now() {
		return formatDate(new Date(), "yyyyMMddHHmmss");
	}

	public static String formatShortDateC(Date gstrDate) {
		if (gstrDate == null)
			return null;
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy年MM月dd日");

		String pid = formatter.format(gstrDate);
		return pid;
	}

	public static String getNow() {
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd H:mm:ss");
		Date nowc = new Date();
		String pid = formatter.format(nowc);
		return pid;
	}

	public static String formatShort(String strDate) {
		String ret = "";
		if ((strDate != null) && (!"1900-01-01 00:00:00.0".equals(strDate))
				&& (strDate.indexOf("-") > 0)) {
			ret = strDate;
			if (ret.indexOf(" ") > -1)
				ret = ret.substring(0, ret.indexOf(" "));
		}
		return ret;
	}

	public static int getNumberOfSecondsBetween(double d1, double d2) {
		if ((d1 == 0.0D) || (d2 == 0.0D)) {
			return -1;
		}

		return (int) (Math.abs(d1 - d2) / 1000.0D);
	}

	public static int getNumberOfMonthsBetween(Date before, Date end) {
		if ((before == null) || (end == null))
			return -1;
		Calendar cal1 = Calendar.getInstance();
		cal1.setTime(before);
		Calendar cal2 = Calendar.getInstance();
		cal2.setTime(end);
		return (cal2.get(1) - cal1.get(1)) * 12 + (cal2.get(2) - cal1.get(2));
	}

	public static long getNumberOfMinuteBetween(Date before, Date end) {
		if ((before == null) || (end == null))
			return -1L;
		long millisec = end.getTime() - before.getTime();
		return millisec / 60000L;
	}

	public static long getNumberOfHoursBetween(Date before, Date end) {
		if ((before == null) || (end == null))
			return -1L;
		long millisec = end.getTime() - before.getTime() + 1L;
		return millisec / 3600000L;
	}

	public static String formatMonthAndDay(Date srcDate) {
		return formatDate("MM月dd日");
	}

	public static long getNumberOfDaysBetween(Date before) {
		return getNumberOfDaysBetween(before, new Date());
	}

	public static long getNumberOfDaysBetween(Date before, Date end) {
		if ((before == null) || (end == null))
			return -1L;
		Calendar cal = Calendar.getInstance();
		cal.setTime(before);
		Calendar endCal = Calendar.getInstance();
		endCal.setTime(end);
		return getNumberOfDaysBetween(cal, endCal);
	}

	public static long getNumberOfDaysBetween(Calendar cal1, Calendar cal2) {
		if ((cal1 == null) || (cal2 == null))
			return -1L;
		cal1.clear(14);
		cal1.clear(13);
		cal1.clear(12);
		cal1.clear(11);

		cal2.clear(14);
		cal2.clear(13);
		cal2.clear(12);
		cal2.clear(11);

		long elapsed = cal2.getTime().getTime() - cal1.getTime().getTime();
		return elapsed / 86400000L;
	}

	public static Calendar getCurrentCalendar() {
		return Calendar.getInstance();
	}

	public static Timestamp getCurrentDateTime() {
		return new Timestamp(System.currentTimeMillis());
	}

	public static Date getCurrentDate() {
		return new Date(System.currentTimeMillis());
	}

	public static final int getYear(Date date) {
		if (date == null)
			return -1;
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		return calendar.get(1);
	}

	public static final int getYear(long millis) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeInMillis(millis);
		return calendar.get(1);
	}

	public static final int getMonth(Date date) {
		if (date == null)
			return -1;
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		return calendar.get(2) + 1;
	}

	public static final int getMonth(long millis) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeInMillis(millis);
		return calendar.get(2) + 1;
	}

	public static final int getDate(Date date) {
		if (date == null)
			return -1;
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		return calendar.get(5);
	}

	public static final int getDate(long millis) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeInMillis(millis);
		return calendar.get(5);
	}

	public static final int getHour(Date date) {
		if (date == null)
			return -1;
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		return calendar.get(11);
	}

	public static final int getHour(long millis) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeInMillis(millis);
		return calendar.get(11);
	}

	public static Date getDateByUrl(String url) {
		try {
			URLConnection uc = new URL(url).openConnection();
			uc.connect();
			return new Date(uc.getDate());
		} catch (MalformedURLException e) {
			logger.error("", e);
		} catch (IOException e) {
			logger.error("", e);
		}
		return null;
	}

	/**
	 * date2比date1多的天数
	 * 
	 * @param date1
	 * @param date2
	 * @return
	 */
	public static int differentDays(Date date1, Date date2) {
		Calendar cal1 = Calendar.getInstance();
		cal1.setTime(date1);

		Calendar cal2 = Calendar.getInstance();
		cal2.setTime(date2);
		int day1 = cal1.get(Calendar.DAY_OF_YEAR);
		int day2 = cal2.get(Calendar.DAY_OF_YEAR);

		int year1 = cal1.get(Calendar.YEAR);
		int year2 = cal2.get(Calendar.YEAR);
		if (year1 != year2) // 同一年
		{
			int timeDistance = 0;
			for (int i = year1; i < year2; i++) {
				if (i % 4 == 0 && i % 100 != 0 || i % 400 == 0) // 闰年
				{
					timeDistance += 366;
				} else // 不是闰年
				{
					timeDistance += 365;
				}
			}

			return timeDistance + (day2 - day1);
		} else // 不同年
		{
			System.out.println("判断day2 - day1 : " + (day2 - day1));
			return day2 - day1;
		}
	}

	public static List<String> getTimeDifferenceList(Date d1, Date d2) {
		DateFormat dfs = new SimpleDateFormat("yyyy-MM-dd");
		long diff = d2.getTime() - d1.getTime();
		if (diff < 0) {
			return null;
		}
		long days = diff / (1000 * 60 * 60 * 24);
		List<String> dateList = new ArrayList<String>();
		String[] s = new String[(int) days + 1];
		for (int i = 0; i < s.length; i++) {
			dateList.add(dfs.format(d1));
			d1.setTime(d1.getTime() + 1000 * 60 * 60 * 24);
		}

		for (int i = 0; i < s.length; i++) {
			System.out.println(s[i]);
		}
		return dateList;
	}

	/**
	 * 计算两个时间中间相隔的天
	 * @param date1 起始时间
	 * @param date2 结束时间
	 * @param dateFormat "YYYY-MM-dd"
	 * @return
	 */
	public static List<String> getTimeDifferenceArrayList(Date date1, Date date2,String dateFormat) {
		Calendar cal1 = Calendar.getInstance();
		cal1.setTime(date1);

		Calendar cal2 = Calendar.getInstance();
		cal2.setTime(date2);
		int day1 = cal1.get(Calendar.DAY_OF_YEAR);
		int day2 = cal2.get(Calendar.DAY_OF_YEAR);

		int year1 = cal1.get(Calendar.YEAR);
		int year2 = cal2.get(Calendar.YEAR);
		int days = 0;
		if (year1 != year2) // 同一年
		{
			int timeDistance = 0;
			for (int i = year1; i < year2; i++) {
				if (i % 4 == 0 && i % 100 != 0 || i % 400 == 0) // 闰年
				{
					timeDistance += 366;
				} else // 不是闰年
				{
					timeDistance += 365;
				}
			}

			days = timeDistance + (day2 - day1);
		} else // 不同年
		{
			System.out.println("判断day2 - day1 : " + (day2 - day1));
			days = day2 - day1;
		}
		List<String> daysList = new ArrayList<String>();
		for(int i = 0; i<days ; i++){
			Calendar cal = Calendar.getInstance();
			cal.setTime(date1);
			cal.add(Calendar.DAY_OF_YEAR, i);
			daysList.add(new SimpleDateFormat(dateFormat).format(cal.getTime()));
		}
		return daysList;
	}

}
